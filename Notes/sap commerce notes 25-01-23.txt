25/01/23
Occ Webservices:

OCC layer (a REST Api) is used to expose hybris commerce functionality as a stateless API, it gives a power to platform to make
it omni-channel.

And with that, you can expose and connect Hybris API to external applications like native app etc with minimal customization.

It exposes core business logic and data allowing the integration with other systems, mainly mobile and frontend applications,
 using REST web services.

Why OCC is different from Web Service API?

Exposes core business logic and data using the commercefacades.

It is not used  for CRUD operations

It uses POJO objects instead of DTO Classes generated by the platformwebservices extension.

Key Concepts of OCC:

One central place which exposes consistent business rules.

It is a commerce API.

It may connect an external CMS, mobile apps, point of sale terminals, consoles, digital ads, touch devices, social networks,
 call centers or any other system with eCommerce capabilities.

It allows Scenarios like:

Live stream, shop as you watch (TV + Mobile, Checkout)

Giving purchase  suggestion alert based on the location of shop(Mobile, Product + Location Services)

Not available in store, deliver to home. (Point of Sale, Checkout)

WsDTO:
The version 1 of the web services uses the DataObjects returned by the commercefacades. They can be extend using the *-beans.xml application
 context.

To bring stability to the REST responses, the version 2 uses WsDTO which are POJOs which are only used by OCC.
 The Orika mapper is used for the conversion.

OCC's Key Features

All the eCommerce data, including the cart, is shared around all channels and hybris cockpits.

A prototype of a shop may be built using HTML, CSS and Javascript.

Publishes RESTlike web services with support for XML and JSON.

Version 1 isn't RESTful because the cart requests requires a session ID.

Supports OAuth 2 (default) and basic authentication over HTTPS. In the later case, each request must contain the user and the password.

The security is based on access roles at the service layer and OAuth 2 configuration
Supports Addons.

To extend the web services, use the extension commercewebservicescommons.

The extension acceleratorwebservicesaddon is an example of an addon which extends OCC.

The representation of deep levels of attributes in the response can be configured using the parameter fields.

ycommercewebservices extension

It is a template Based on Spring MVC.

If you want to customize OCC you must create a custom extension using ycommercewebservices as a template.

Supports XML and JSON. Requests with JSON must send all the information as parameters in the URL.

Exposes the commercefacades as web services
Error responses
The HTTP Status follows the REST paradigm.

The body returns the type of error (mandatory), a message (mandatory), the type of the subject, a subject and a reason.
Each exception can be associated to a HTTP Status using Spring.

It is recommended to use a secure HTTPS connection and client credentials for all requests.

Cross-Origin Resource Sharing:
The extension supports CORS using a standard filter.

If no javascript app needs access to the REST web services from another domain, it can be deactivated.

The extension includes (payment) address validators which are configured using Spring:
FieldNotEmptyValidator, FieldNotEmptyOrTooLongValidator, CompositeValidator (delegates validation to other validators), CountryAwareAddressValidator (delegates using the country code as criteria).
Requests

Cookies: Most of the requests are stateless except for the cart requests. In this case the cookie returned by the server must be used in the subsequent requests. It is recommended to save the cookie from the first request and send it in every subsequent request.
The second version of the web services are stateless. The cart ID and user ID iis used for these requests.

All the requests accept the parameters lang and curr to change the language and the currency of the returned response.

If they are empty, the default configuration of the base store is used.

All request have a version number to encourage the versioning of the web services.

The second version is for experimentation.

After the version of the REST services comes the UID of the basestore. The urls for the different types of items may be configured.
This applies only to version 2.

Usual Sequence of requests to place an order

These requests are stateful if we are using version 1 of the web services.

A cookie is generated for the cart which must be sent in the subsequent requests.

Version 2 doesn't use sessions. The ID of the cart is used instead.
